from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from tgbot.filters.admin import AdminFilter
from tgbot.keyboards.inline import MainMenu, procedures_kb, ProceduresMenu, procedures_confirm_kb, ProceduresConfirmMenu
from tgbot.services.db import run_procedure

kpi_router = Router()
kpi_router.message.filter(AdminFilter())


@kpi_router.callback_query(MainMenu.filter(F.choice == "kpi"))
async def kpi_check(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
        reply_markup=procedures_kb()
    )


@kpi_router.callback_query(ProceduresMenu.filter())
async def procedure_confirm(callback: CallbackQuery, callback_data: ProceduresMenu):
    await callback.answer()

    picked_variant = callback_data.procedure

    # Map procedure codes to display names
    procedure_names = {
        "day": "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å",
        "week": "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é",
        "month": "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü"
    }

    procedure_name = procedure_names.get(picked_variant, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É")

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n"
        f"–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:\n"
        f"<i>{procedure_name}</i>?\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=procedures_confirm_kb(picked_variant),
        parse_mode="HTML"
    )


@kpi_router.callback_query(ProceduresConfirmMenu.filter(F.action == "confirm"))
async def procedure_execute(callback: CallbackQuery, callback_data: ProceduresConfirmMenu):
    await callback.answer()

    picked_variant = callback_data.procedure

    # Show loading message
    await callback.message.edit_text(
        "‚è≥ <b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞...</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    )

    try:
        success, message = None, None

        match picked_variant:
            case "day":
                success, message = await run_procedure("UpdateKPIStatsDay")
            case "week":
                success, message = await run_procedure("UpdateKPIStatsWeek")
            case "month":
                success, message = await run_procedure("UpdateKPIStatsMonth")
            case _:
                success, message = False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞"

        if success:
            result_text = (
                "‚úÖ <b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {message if message else '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}"
            )
        else:
            result_text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</b>\n\n"
                f"–î–µ—Ç–∞–ª–∏: {message if message else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
            )

    except Exception as e:
        result_text = (
            "‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É: {str(e)}"
        )

    # Return to main KPI menu
    back_button = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä",
                             callback_data=MainMenu(choice="kpi").pack())
    ]])

    await callback.message.edit_text(
        result_text,
        reply_markup=back_button,
        parse_mode="HTML"
    )


@kpi_router.callback_query(ProceduresConfirmMenu.filter(F.action == "cancel"))
async def procedure_cancel(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
        reply_markup=procedures_kb()
    )